Given a picture consisting of black and white pixels, find the number of black lonely pixels.

The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.

A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.

Example:

Input:
[['W', 'W', 'B'],
 ['W', 'B', 'W'],
 ['B', 'W', 'W']]

Output: 3
Explanation: All the three 'B's are black lonely pixels.


Note:

The range of width and height of the input 2D array is [1,500].

int findLonelyPixel(vector<vector<char>>& picture) {
    if (picture.empty()) return 0;
    int row = (int) picture.size();
    int col = (int) picture[0].size();
    vector<int> row_counts(row, 0), col_counts(col, 0);
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < col; ++j) {
            if (picture[i][j] == 'B') {
                row_counts[i]++;
                col_counts[j]++;
            }
        }
    }
    int lonely = 0;
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < col; ++j) {
            if (picture[i][j] == 'B') {
                if (row_counts[i] == 1 && col_counts[j] == 1)
                    lonely++;
            }
        }
    }
    return lonely;
}
