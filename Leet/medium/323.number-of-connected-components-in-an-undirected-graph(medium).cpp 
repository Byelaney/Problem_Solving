Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

     0          3

     |          |

     1 --- 2    4

Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:

     0           4

     |           |

     1 --- 2 --- 3

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

 Note:

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

void dfs(vector<bool>& visited, vector<vector<bool>>& connected, int v) {
    visited[v] = true;
    for (int i = 0; i < visited.size(); ++i) {
        if (connected[v][i] && (!visited[i])) {
            visited[i] = true;
            dfs(visited, connected, i);
        }
    }
}

int countComponents(int n, vector<pair<int, int> >& edges) {
    vector<vector<bool>> connected(n, vector<bool>(n));
    for (auto edge : edges) {
        connected[edge.first][edge.second] = true;
        connected[edge.second][edge.first] = true;
    }
    vector<bool> visited(n);
    int counts = 0;
    for (int i = 0; i < connected.size(); ++i) {
        if (!visited[i]) {
            dfs(visited, connected, i);
            counts++;
        }
    }
    return counts;
}
